// Code generated by mockery v2.15.0. DO NOT EDIT.

package dynamodb

import (
	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// BatchGetWithSort provides a mock function with given fields: values
func (_m *MockClient) BatchGetWithSort(values map[string]interface{}) error {
	ret := _m.Called(values)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOne provides a mock function with given fields: table, partitionKey, bindTo
func (_m *MockClient) GetOne(table string, partitionKey string, bindTo interface{}) error {
	ret := _m.Called(table, partitionKey, bindTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(table, partitionKey, bindTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOneWithSort provides a mock function with given fields: table, partitionKey, sortKey, bindTo
func (_m *MockClient) GetOneWithSort(table string, partitionKey string, sortKey string, bindTo interface{}) error {
	ret := _m.Called(table, partitionKey, sortKey, bindTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, interface{}) error); ok {
		r0 = rf(table, partitionKey, sortKey, bindTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryExpression provides a mock function with given fields: table, query, limit, bindTo
func (_m *MockClient) QueryExpression(table string, query expression.Expression, limit int32, bindTo interface{}) error {
	ret := _m.Called(table, query, limit, bindTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, expression.Expression, int32, interface{}) error); ok {
		r0 = rf(table, query, limit, bindTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryOne provides a mock function with given fields: table, partitionKey, limit, bindTo
func (_m *MockClient) QueryOne(table string, partitionKey string, limit int32, bindTo interface{}) error {
	ret := _m.Called(table, partitionKey, limit, bindTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int32, interface{}) error); ok {
		r0 = rf(table, partitionKey, limit, bindTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: table, item
func (_m *MockClient) Save(table string, item interface{}) error {
	ret := _m.Called(table, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(table, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
